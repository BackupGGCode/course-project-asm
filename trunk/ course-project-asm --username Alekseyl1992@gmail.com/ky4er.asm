;тестировочный проект (ky4er)

;;;;;; OFFTOPIC
; все-таки стандартный шрифт 8x16... my bad
; меня подвел русификатор keyrus (хохляцкий)
; которым я давно пользовался
; Как оказалось, он не совсем корректно работает с
; таблицей символов (ну или я дурак, хз)
; в общем с русификатором rkm (спасибо С.А.)
; все работает хорошо
;;;;;; OFFTOPIC

code segment 'code'
assume cs:code, ds:code, es:code

; от верхней строки, до нижней
symbol db 00000000b
       db 00000000b
       db 00000000b
       db 00111110b
       db 00111111b
       db 00110011b
       db 01100110b
       db 01100110b
       db 01111100b
       db 11000110b
       db 11000110b
       db 11000110b
       db 11111100b
       db 00000000b
       db 00000000b
       db 00000000b
	
; символ для замены	
char db 'В'
; переменная для хранения старого символа
stored_symbol db 16 dup(0ffh)

start:
	push cs
	pop ds
	push cs
	pop es

; сохpаняем написание символа 
	call savefont
	mov cl, char
shifttable:
; мы получаем в bp таблицу всех символов. адрес указывает на символ 0
; поэтому нуэно совершить сдвиг 16*X - где X - код символа
	add bp, 16
	loop shifttable

; >!!!
; пpи savefont смещается pегистp es
; поэтомy пpиходится делать такие махинации, чтобы 
; записать полyченный элемент туда, куда нам нужно (в stored_symbol)
;
; тут возможно, можно изяшнее сделать, но я чет краб =(
;
	push ds
	pop ax
	push es
	pop ds
	push ax
	pop es
	push ax
;	
	mov si, bp
	lea di, stored_symbol
; сохpаняем в пеpеменнyю stored_symbol
; таблицy нyжного символа
	mov cx, 16
; для себя
; movsb из ds:si в es:di
	rep movsb

; исходные позиции сегментов возвpащены	
	pop ds	
;>!!!

; заменим написание символа на кypсив
	mov cx, 1
	mov dh, 0
	mov dl, char
	lea bp, symbol
	call changefont
	
; ну и 30 раз выведем наше творение
	mov cx, 30
	mov ah, 02
	mov dl, char
mloop:
	int 21h
	loop mloop
;
; пауза
	mov ah, 07
	int 21h
;
; веpнем пpошлyю бyквy
	mov cx, 1
	mov dh, 0
	mov dl, char
	lea bp, stored_symbol
	call changefont

; пауза
	mov ah, 07
	int 21h
; выход
	mov ax, 4c00h
	int 21h

; *** входные данные
; dl = номер символа для замены
; cx = Кол-во символов заменяемых изображений символов
; (начиная с символа указанного в dx)
; es:bp = адрес таблицы
;
; *** описание работы процедуры
; Происходит вызов int 10h (видеосервис)
; с функцией AH = 11h (функции знакогенератора)
; Параметр AL = 0 сообщает, что будет заменено изображение
; символа для текущего шрифта
; В случаях, когда AL = 1 или 2, будет заменено изображение
; только для опредленного шрифта (8x14 и 8x8 соответственно)
; Параметр BH = 0Eh сообщает, что на опредление каждого изображения символа
; расходуется по 14 байт (режим 8x14 бит как раз 14 байт)
; Параметр BL = 0 - блок шрифта для загрузки (от 0 до 4)
; ??? не совсем понял суть данного параметра
;
; *** результат
; изображение указанного(ых) символа(ов) будет заменено
; на предложенное пользователем.
; Изменению подвергнутся все символы, находящиеся на экране,
; то есть если изображение заменено, старый вариант нигде уже не проявится

changefont proc
	push ax
	push bx
	mov ax, 1100h
	mov bx, 1000h
	int 10h
	pop ax
	pop bx
	ret
changefont endp

; *** входные данные
; bh - тип возвращаемой символьной таблицы
;   0 - таблица из int 1fh
;   1 - таблица из int 44h
;   2-5 - таблица из 8x14, 8x8, 8x8 (top), 9x14
;   6 - 8x16
;;;; OFFTOP
; это просто пиздец
; нигде не написано , что 8x16 - это bh=6
; нашел только тут http://www.htl-steyr.ac.at/~morg/pcinfo/hardware/interrupts/inte6rg0.htm
; каким образом, я не знаю.
; если найдете эту же информацию где-нить на норм сайте
; то значит я не умею гуглить, извините
;;;; OFFTOP
;
; *** описание работы процедуры
; Происходит вызов int 10h (видеосервис)
; с функцией AH = 11h (функции знакогенератора)
; Параметр AL = 30 - подфункция получения информации о EGA
; про bl ничего не написано, но лучше обнулять
; у меня вроде баговало, когда в bl были рандомные значения
; но это не 100% инфа
;
; *** результат
; в es:bp находится таблица символов (полная)
; в cx находится байт на символ
; в dl количество экранных строк
; ВАЖНО! Происходит сдвиг регистра ES
; ( ES становится равным C000h )

savefont proc
	push ax
	push bx
	mov ax, 1130h
	mov bx, 0600h
	int 10h
	pop ax
	pop bx
	ret
savefont endp

code ends
end start